// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: password_resets.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTokenForUser = `-- name: CreateTokenForUser :one
INSERT INTO password_resets (user_id, token_hash, expires_at)
VALUES ($1, $2, $3) ON CONFLICT (user_id) DO
    UPDATE
        SET token_hash = $2, expires_at = $3
RETURNING id
`

type CreateTokenForUserParams struct {
	UserID    pgtype.Int4
	TokenHash string
	ExpiresAt pgtype.Timestamptz
}

func (q *Queries) CreateTokenForUser(ctx context.Context, arg CreateTokenForUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, createTokenForUser, arg.UserID, arg.TokenHash, arg.ExpiresAt)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteTokenById = `-- name: DeleteTokenById :exec
DELETE FROM password_resets
WHERE id = $1
`

func (q *Queries) DeleteTokenById(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTokenById, id)
	return err
}

const getUserForToken = `-- name: GetUserForToken :one
SELECT
    password_resets.id AS reset_token_id,
    password_resets.expires_at,
    users.id AS user_id,
    users.name,
    users.email,
    users.password_hash,
    users.is_admin
FROM password_resets
    JOIN users on users.id = password_resets.user_id
WHERE password_resets.token_hash = $1
`

type GetUserForTokenRow struct {
	ResetTokenID int32
	ExpiresAt    pgtype.Timestamptz
	UserID       int32
	Name         string
	Email        string
	PasswordHash string
	IsAdmin      bool
}

func (q *Queries) GetUserForToken(ctx context.Context, tokenHash string) (GetUserForTokenRow, error) {
	row := q.db.QueryRow(ctx, getUserForToken, tokenHash)
	var i GetUserForTokenRow
	err := row.Scan(
		&i.ResetTokenID,
		&i.ExpiresAt,
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.IsAdmin,
	)
	return i, err
}
