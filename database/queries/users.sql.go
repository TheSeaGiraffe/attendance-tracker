// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package queries

import (
	"context"
)

const createNewUser = `-- name: CreateNewUser :one
INSERT INTO users (name, email, password_hash, is_admin)
VALUES ($1, $2, $3, $4) RETURNING id
`

type CreateNewUserParams struct {
	Name         string
	Email        string
	PasswordHash string
	IsAdmin      bool
}

func (q *Queries) CreateNewUser(ctx context.Context, arg CreateNewUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, createNewUser,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.IsAdmin,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password_hash, is_admin FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.IsAdmin,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password_hash = $2
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID           int32
	PasswordHash string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	return err
}
